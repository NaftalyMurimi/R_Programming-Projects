x <- c("abc", "bcd", "cde", "def", "gbcd")
x <- c("abc", "bcd", "cde", "def", "gbcd")
# Find indices of elements containing "bc"
grep("bc", x)
# Find indices of elements containing "bc"
grep("bc", x, value=TRUE)
# Find indices of elements containing "bc"
grep("bc", x, invert = TRUE)
x <- c("abc", "bcd", "cde", "def", "gbcd")
# Find indices of elements containing "bc"
grep("bc", x, invert = TRUE, value = TRUE)
x <- c("ablc", "bcd", "bcdebc", "bbbbdefc")
# Replace first match
sub("bc", "kk", x)
x <- c("ablc", "bcd", "bcdebc", "bcbbbcdefc")
# Replace first match
sub("bc", "kk", x)
# Output: [1] "agh" "ghd" "cde" "def"
# Replace all matches
gsub("bc", "ko", x)
# Output: [1] 2
# Match groups
a <- "Misksikkssippi contains a palindrome isksissi."
regexec(".(pp)", a)
a <- "Misksikkssippi contains a palindrome isksisssi."
# First occurrence of "iss"
regexpr("isss", a)
# Output: [1] 2
# Match groups
a <- "Misksikkssippi contains a palindrome isksissi."
regexec(".(pp)", a)
gregexpr("ss", a)
# Find indices of elements containing "bc"
grep("bc", x, invert = TRUE, value = TRUE)
grep("bc",x)
gregexpr("ss", a)
a <- "My"
b <- "string"
# Add a custom separator
paste(a, b, sep = ".")
# Task 2
# Load the tweets.RData file into RStudio. It is a data frame containing the tweets published
# by the RDataMining profile in a certain time range
load("tweets.RData")
# TASK 2
# load the tweets.RData file into RStudio. It is a data frame containing the tweets published
# by the RDataMining profile in a certain time range.
Mytweet <- readLines("tweets.RData")
Mytweet
# Task 2
# Load the tweets.RData file into RStudio. It is a data frame containing the tweets published
# by the RDataMining profile in a certain time range
load("tweets.RData")
# a) What is the number of tweets?
nrow(tweets)
summary(tweets)
setwd("C:/Users/nafmu/Desktop/Cognitive Tech/R/Lab. 4 Text-mining-20241210")
# Task 2
# Load the tweets.RData file into RStudio. It is a data frame containing the tweets published
# by the RDataMining profile in a certain time range
load("tweets.RData")
# a) What is the number of tweets?
nrow(tweets)
summary(tweets)
# b) Change "-" to “/” in the publication dates.
str(tweets)
tweets$created <- gsub("-", "/", tweets$created) # musi być na zmienna adresująca kolumne w df, żeby ją nadpisać
head(tweets)
# c) Create a new column containing only the year of publication.
tweets$year <- gsub("^(\\d{4}).*", "\\1", tweets$created)
head(tweets)
# Create a violin plot of retweet counts per year. Mark years with different colours
# (parameter fill).
library(ggplot2)
# c) Create a new column containing only the year of publication.
tweets$year <- gsub("^(\\d{4}).+", "\\1", tweets$created)
head(tweets)
n=seq(4,70)
# Output: [1] 2
# Match groups
a <- "Misksikkssippi contains a palindrome isksissi."
n
# TASK 2
# Download the Heart dataset from the Educational Platform and load the data (you may use
# the read.csv function suitable for comma-separated files).
heart = "C:/Users/nafmu/Desktop/Cognitive Tech/R/Lab. 3 R for data analysis-20241203/Heart.csv"
my_heart <- read.table(file = heart, header = T, sep = ',')
# a) Using t-tests, check whether there are statistically significant differences in:
#   • Cholesterol levels (Chol) in different Fasting Blood Sugar groups (Fbs: 0 - normal, 1 elevated);
# t-test
chol_levels <- t.test(Chol~Fbs, data=my_heart)
chol_levels$statistic
chol_levels$p.value
# • Maximum Heart Rates (MaxHR) in people with and without Heart Disease (AHD);
HeartR_Dis <- t.test(MaxHR~Fbs, data=my_heart)
HeartR_Dis$statistic
HeartR_Dis$p.value
# • Resting Blood Pressure (RestBP) depending on Sex (0 - female, 1 – male).
BP_Sex <- t.test(RestBP~Sex, data=my_heart)
BP_Sex$statistic
BP_Sex$p.value
chol_levels$p.value<0.05
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
plot(pressure)
print("Hello world!")
print("Hello world!")
print("Hello world!")
print("Hello world!")
print("Hello world!")
library(ggcorrplot)
library(ggcorrplot)
library(ggcorrplot)
library(ggcorrplot)
plot(1:50,log(1:50))
plot(1:50,log(1:50))
library(knitr)
library(ISLR)
data(Auto)
kable(Auto[1:5,1:4], caption = "Auto dataset")
print("End of class")
shiny::runApp('C:/Users/nafmu/Desktop/Cognitive Tech/R/Lecture 5 Documentation for reproducibility and R web applications-20241210/autoApp')
x <- c("ablc", "bcd", "bcdebc", "bcbbbcdefc")
# Output: [1] "agh" "ghd" "cde" "def"
# Replace all matches
gsub("bc", "ko", x)
# by
data("iris")
attach(iris)
head(iris)
# Output: [1] 2
# Match groups
a <- "Misksikkssippi contains a palindrome isksissi."
regexec(".(pp)", a)
gregexpr("ss", a)
# First occurrence of "iss"
regexpr("isss", a)
knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
data()
summary(Hitters)
library(ISLR)
data(Hitters)
summary(Hitters)
library(ISLR)
data(Hitters)
summary(Hitters)
str(Hitters)
library(ISLR)
data(Hitters)
summary(Hitters)
str(Hitters)
library(ggplot2)
hitters$salaries
rm(list = ls()) # cleaning the workspace
library(ISLR)
data(Hitters)
summary(Hitters)
str(Hitters)
View(Hitters)
View(Hitters)
library(ggplot2)
hitters$Salary
library(ggplot2)
ggplot(hitters, aes(x=acceleration, y=hitters$Salary)) +
geom_point()
library(ggplot2)
ggplot(hitters, aes(x=acceleration, y=Hitters$Salary)) +
geom_point()
library(ggplot2)
ggplot(Hitters, aes(x=acceleration, y=Hitters$Salary)) +
geom_point()
library(ggplot2)
ggplot(Hitters, aes(x=Hitters[,1], y=Hitters$Salary)) +
geom_point()
library(ggplot2)
ggplot(Hitters, aes(x=Hitters$Runs, y=Hitters$Salary)) +
geom_point()
library(ggplot2)
ggplot(Hitters, aes(x=Runs, y=Salary)) +
geom_point()
library(ISLR)
data(Hitters)
summary(Hitters)
summary(Hitters$"C.*")
str(Hitters)
library(ISLR)
data(Hitters)
#summary(Hitters)
summary(Hitters[,8:14])
str(Hitters)
library(ggplot2)
ggplot(Hitters, aes(x=Runs, y=Salary)) +
geom_point(aes(fill=League))
library(ggplot2)
ggplot(Hitters, aes(x=Runs, y=Salary)) +
geom_point(aes(colour=League))
library(ggplot2)
ggplot(Hitters, aes(x=Runs, y=Salary)) +
geom_point(aes(colour=League))+
theme_bw()
library(ggplot2)
ggplot(Hitters, aes(x=Runs, y=Salary)) +
geom_point(aes(colour=League))+
facet_wrap(~Division)+
theme_bw()
library(ggplot2)
ggplot(Hitters, aes(x=Runs, y=Salary)) +
geom_point(aes(colour=League))+
facet_wrap(~Division)+
scale_colour_brewer(palette="Dark2")+
theme_bw()
library(ggplot2)
ggplot(Hitters, aes(x=Runs, y=Salary)) +
geom_point(aes(colour=League))+
facet_wrap(~Division)+
scale_colour_brewer(palette="Dark2")+
theme_bw()
library(ggplot2)
ggplot(Hitters, aes(x=Runs, y=Salary)) +
geom_point(aes(colour=League))+
facet_wrap(~Division)+
scale_colour_brewer(palette="Dark2")+
theme_bw()
library(ISLR)
data(Hitters)
#summary(Hitters)
summary(Hitters[,8:14])
str(Hitters)
library(ggplot2)
ggplot(Hitters, aes(x=Runs, y=Salary)) +
geom_point(aes(colour=League))+
facet_wrap(~Division)+
scale_colour_brewer(palette="Dark2")+
theme_bw()
library(ggplot2)
ggplot(Hitters, aes(x=Runs, y=Salary, colour=League)) +
geom_point()+
facet_wrap(~Division)+
scale_colour_brewer(palette="Dark2")+
theme_bw()
library(ggplot2)
ggplot(Hitters, aes(x=Runs, y=Salary, colour=League)) +
geom_point()+
facet_wrap(~Division)+
scale_colour_brewer(palette="Dark2")+
theme_bw()
library(ISLR)
data(Hitters)
summary(Hitters)
summary(Hitters[,8:14])
str(Hitters)
gplot(Hitters, aes(Runs, Divisions)) +
geom_violin(aes(fill=brand ), trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
facet_wrap(~Division)+
#theme(axis.title=element_text(size=15))
gplot(Hitters, aes(Runs, Divisions)) +
geom_violin(aes(fill=brand ), trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
facet_wrap(~Division)
ggplot(Hitters, aes(Runs, Divisions)) +
geom_violin(aes(fill=brand ), trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
facet_wrap(~Division)
ggplot(Hitters, aes(Runs, Divisions)) +
geom_violin(aes(), trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
facet_wrap(~Division)
# Load package with data
library(ISLR)
data(Auto)
attach(Auto)
head(Auto)
ggplot(Auto8, aes(brand, mpg)) +
geom_violin(aes(fill=brand ), trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
theme(axis.text=element_text(size=8)) +
theme(axis.title=element_text(size=15))
Auto8 <- Auto[!is.na(match(Auto$brand,brand8)),]
brand8 <- unique(Auto$brand)[1:8]
Auto8 <- Auto[!is.na(match(Auto$brand,brand8)),]
ggplot(Auto8, aes(brand, mpg)) +
geom_violin(aes(fill=brand ), trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
theme(axis.text=element_text(size=8)) +
theme(axis.title=element_text(size=15))
?Hitters
ggplot(Hitters, aes(Runs, Divisions)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
facet_wrap(~Division)
ggplot(Hitters, aes(Runs, Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
facet_wrap(~Division)
+theme_bw()
ggplot(Hitters, aes(Runs)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
facet_wrap(~Division)+
theme_light()
?geom_violin
ggplot(mtcars, aes(mpg, factor(cyl))) +
geom_violin()
ggplot(Hitters, aes(Runs, Division,fill=Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
facet_wrap(~Division)+
theme_light()
ggplot(Hitters, aes(Runs, Division,fill=Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
facet_wrap(~Division)+
theme_light()
?geom_violin()
?theme_light()
ggplot(Hitters, aes(Runs, Division,fill=Division)) +
geom_violin( trim=FALSE) +
facet_wrap(~Division)+
theme_light(palette="Set1")
ggplot(Hitters, aes(Runs, Division,fill=Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
facet_wrap(~Division)+
theme_light(colour="Set1")
ggplot(Hitters, aes(Runs, Division,fill=Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
facet_wrap(~Division)+
theme_light()
ggplot(Hitters, aes(Runs, Division,fill=Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
facet_wrap(~Division)+
theme_light(aes(alpha=0.8))
ggplot(Hitters, aes(Runs, Division,fill=Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
facet_wrap(~Division)+
theme_light(aes(alpha=.8))
ggplot(Hitters, aes(Runs, Division,fill=Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Dark2") +
facet_wrap(~Division)+
theme_light(alpha=.8)
ggplot(Hitters, aes(Runs, Division,fill=Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Set1") +
facet_wrap(~Division)+
theme_light()
ggplot(Hitters, aes(Runs, Division,fill=Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Set1", alpha=0.8) +
facet_wrap(~Division)+
theme_light()
ggplot(Hitters, aes(Runs, Division,fill=Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Set1", aes(alpha=0.8)) +
facet_wrap(~Division)+
theme_light()
ggplot(Hitters, aes(Runs, Division,fill=Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Set1", aes(alpha=0.3)) +
facet_wrap(~Division)+
theme_light()
ggplot(Hitters, aes(Runs, Division,fill=Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Set1", aes(alpha=0.3)) +
facet_wrap(~Division)+
theme_light()
?table()
kable(Hitters[,14:15], caption = "No of players")
ggplot(Hitters, aes( Division,Runs,fill=Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Set1", aes(alpha=0.3)) +
facet_wrap(~Division)+
theme_light()
ggplot(Hitters, aes( Division,Runs,fill=Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Set1", aes(alpha=0.3)) +
facet_wrap(~League)+
theme_light()
ggplot(Hitters, aes( Division,Runs,fill=Division)) +
geom_violin( trim=FALSE) +
scale_fill_brewer(palette="Set1",alpha=0.3) +
facet_wrap(~League)+
theme_light()
ggplot(Hitters, aes( Division,Runs,fill=Division)) +
geom_violin( trim=FALSE ,alpha=0.3) +
scale_fill_brewer(palette="Set1") +
facet_wrap(~League)+
theme_light()
ggplot(Hitters, aes( Division,Runs,fill=Division)) +
geom_violin( trim=FALSE ,alpha=0.8) +
scale_fill_brewer(palette="Set1") +
facet_wrap(~League)+
theme_light()
ggplot(Hitters, aes( Division,Runs,fill=Division)) +
geom_violin(alpha=0.8) +
scale_fill_brewer(palette="Set1") +
facet_wrap(~League)+
theme_light()
ggplot(Hitters, aes( Division,Runs,fill=Division)) +
geom_violin( trim=FALSE ,alpha=0.8) +
scale_fill_brewer(palette="Set1") +
facet_wrap(~League)+
theme_light()
library(knitr)
library(ISLR)
data(Auto)
# kable(Auto[1:5,1:4], caption = "Auto dataset")
table(Hitters$League, Hitters$Division)
library(knitr)
library(ISLR)
data(Auto)
# kable(Auto[1:5,1:4], caption = "Auto dataset")
kable(table(Hitters$League, Hitters$Division))
library(knitr)
library(ISLR)
data(Auto)
# kable(Auto[1:5,1:4], caption = "Auto dataset")
kable(table(Hitters$League, Hitters$Division), caption = "League Vs Division")
library(knitr)
# kable(Auto[1:5,1:4], caption = "Auto dataset")
kable(table(Hitters$League, Hitters$Division), caption = "League Vs Division")
kable(table(Hitters$League, Hitters$Division), caption = "League Vs Division")
kable(table(Hitters$League <=1986, Hitters$NewLeague <=1986), caption = "League Vs Division")
kable(table(Hitters$League, Hitters$NewLeague), caption = "League Vs Division")
Result<- t.test(Hitters$League~Hitters$NewLeague, data=Hitters)
Result<- t.test(League~NewLeague, data=Hitters)
Result<- t.test(League~NewLeague, data=Hitters)
tb = table(Hitters$League, Hitters$NewLeague)
tb = table(Hitters$League, Hitters$NewLeague)
tb
tb = table(Hitters$League, Hitters$NewLeague)
tb
results <- fisher.test(tb)
results$p.value
results$estimate
Result<- t.test(Hitters$League~ Hitters$NewLeague, data=Hitters)
Result<- t.test(Hitters$League~ Hitters$NewLeague, data=Hitters)
a= table(Hitters$League, Hitters$Division)
kable(a, caption = "League Vs Division")
