summary(loaded_data)
# e) For each variable, check how many missing values there are in your data.
#
# weight 4
# length1 2
# length2 1
# length 1
# length 3
# height 2
# width none
is_missing <- is.na(loaded_data)
head(is_missing)
table(is_missing)
complete_data <- complete.cases(loaded_data)
is_missing <- is.na(complete_data)
is_missing <- is.na(complete_data)
head(is_missing)
table(is_missing)
complete_data <- complete.cases(loaded_data)
missing_data <- is.na(complete_data)
head(missing_data)
table(missing_data)
any(missing_data) # is any record missing?
all(missing_data) # are all records missing?
head(missing_data)
table(missing_data)
apply(myiris, 2, function(i) {table(is.na(i))})
complete_data
complete_data <- complete.cases(loaded_data)
missing_data <- is.na(complete_data)
any(missing_data) # is any record missing?
all(missing_data) # are all records missing?
head(missing_data)
table(missing_data)
apply(myiris, 2, function(i) {table(is.na(i))})
str(loaded_data)
table(data$Species)
table(data$species)
read.table(data, header = TRUE, sep = ",")
table(loaded_data$Species)
# e) For each variable, check how many missing values there are in your data.
#
# weight 4
# length1 2
# length2 1
# length 1
# length 3
# height 2
# width none
is_missing <- is.na(loaded_data)
head(is_missing)
table(is_missing) #total missing values are 11
complete_data <- complete.cases(loaded_data)
complete_data
missing_data <- is.na(complete_data)
any(missing_data) # is any record missing?
# e) For each variable, check how many missing values there are in your data.
#
# weight 4
# length1 2
# length2 1
# length 1
# length 3
# height 2
# width none
is_missing <- is.na(loaded_data)
head(is_missing)
table(is_missing) #total missing values are 11
complete_data <- complete.cases(loaded_data)
complete_data
# e) For each variable, check how many missing values there are in your data.
#
# weight 4
# length1 2
# length2 1
# length 1
# length 3
# height 2
# width none
is_missing <- is.na(loaded_data)
head(is_missing)
table(is_missing) #total missing values are 11
apply(loaded_data, 2, function(i) {table(is.na(i))})
unlist(apply(loaded_data, 2, function(i) {table(is.na(i))}))
apply(loaded_data, 2, function(i) {table(is.na(i))})
New_complete_data <- loaded_data[complete_data,] # removing rows with missing values
New_complete_data
complete_data
any_missing <- is.na(New_complete_data)
head(any_missing)
apply(New_complete_data, 2, function(i) {table(is.na(i))})
write.csv(New_complete_data, file = 'New_complete_data.csv')
write.csv(New_complete_data, file = 'New_complete_data.csv')
my_heart <- read.table(file = heart, header = T, sep = ',')
# TASK 2
# Download the Heart dataset from the Educational Platform and load the data (you may use
# the read.csv function suitable for comma-separated files).
heart = "C:/Users/nafmu/Desktop/Cognitive Tech/R/Lab. 3 R for data analysis-20241203/Heart.csv"
my_heart <- read.table(file = heart, header = T, sep = ',')
my_heart
## Statistical testing ====================================================
library(ISLR)
data(Auto)
attach(Auto)
sAuto <- subset(Auto, cylinders >=6)
# t-test
tt <- t.test(horsepower~cylinders, data=sAuto)
tt$statistic
tt$p.value # There is a significant difference in horsepower between cars with 6 and 8 cylinders
sAuto
my_heart
# a) Using t-tests, check whether there are statistically significant differences in:
#   • Cholesterol levels (Chol) in different Fasting Blood Sugar groups (Fbs: 0 - normal, 1 elevated);
# t-test
chol_levels <- t.test(Chol~Fbs, data=my_heart)
chol_levels$statistic
chol_levels$p.value
# • Maximum Heart Rates (MaxHR) in people with and without Heart Disease (AHD);
Heart_RATE <- t.test(MaxHR~Fbs, data=my_heart)
Heart_RATE$statistic
Heart_RATE$p.value
my_heart
# • Resting Blood Pressure (RestBP) depending on Sex (0 - female, 1 – male).
BP_Sex <- t.test(RestBP~Sex, data=my_heart)
BP_Sex$statistic
BP_Sex$p.value
# b) Verify the results of the t-tests with boxplots.
boxplot(Chol~Fbs, data=my_heart)
boxplot(MaxHR~Fbs, data=my_heart)
boxplot(RestBP~Sex, data=my_heart)
# Contingency table
teaTesting <- matrix(c(3,1,1,3), nrow = 2,
dimnames = list(Guess=c("Milk","Tea"),Truth=c("Milk","Tea")))
teaTesting
Sex_ADH <- fisher.test(my_heart)
ft$p.value # The lady doesn't know her tea
Sex_ADH$p.value
Sex_ADH$estimate
Sex_ADH <- fisher.test(my_heart)
my_heart
my_heart[2]
Sex_ADH <- fisher.test(my_heart[3], my_heart[-1])
BP_Sex$p.value
# b) Verify the results of the t-tests with boxplots.
boxplot(Chol~Fbs, data=my_heart)
Sex_ADH <- fisher.test(my_heart[3,-1])
Sex_ADH$p.value
Sex_ADH$estimate
# c) Using Fisher tests, check if there is a statistically significant dependency between:
#   • Sex (0 - female, 1 – male) and people with and without Heart Disease (AHD);
#create table with sex and heart disease only
sex_adh_table = matrix(c(my_heart[3], c(my_heart[-1])))
sex_adh_table
my_heart[3]
my_heart[-1]
my_heart[15]
# c) Using Fisher tests, check if there is a statistically significant dependency between:
#   • Sex (0 - female, 1 – male) and people with and without Heart Disease (AHD);
#create table with sex and heart disease only
sex_adh_table = matrix(c(my_heart[3], c(my_heart[15])))
sex_adh_table
Sex_ADH <- fisher.test(sex_adh_table)
# c) Using Fisher tests, check if there is a statistically significant dependency between:
#   • Sex (0 - female, 1 – male) and people with and without Heart Disease (AHD);
#create table with sex and heart disease only
sex_adh_table = table(my_heart$sex, my_heart$ADH)
my_heart$ADH
my_heart$sex
# c) Using Fisher tests, check if there is a statistically significant dependency between:
#   • Sex (0 - female, 1 – male) and people with and without Heart Disease (AHD);
#create table with sex and heart disease only
sex_adh_table = table(my_heart$sex, my_heart$ADH)
Sex_ADH <- fisher.test(sex_adh_table)
my_heart
# c) Using Fisher tests, check if there is a statistically significant dependency between:
#   • Sex (0 - female, 1 – male) and people with and without Heart Disease (AHD);
#create table with sex and heart disease only
sex_adh_table = table(my_heart$Sex, my_heart$ADH)
# c) Using Fisher tests, check if there is a statistically significant dependency between:
#   • Sex (0 - female, 1 – male) and people with and without Heart Disease (AHD);
#create table with sex and heart disease only
sex_adh_table = table(my_heart$Sex, my_heart$ADH)
# c) Using Fisher tests, check if there is a statistically significant dependency between:
#   • Sex (0 - female, 1 – male) and people with and without Heart Disease (AHD);
#create table with sex and heart disease only
sex_adh_table = table(my_heart$Sex, my_heart$AHD)
Sex_AHD <- fisher.test(sex_adh_table)
Sex_AHD$p.value
Sex_AHD$estimate
sex_Cpain <- fisher.test(sex_Cpain_table)
sex_Cpain$p.value
sex_Cpain$estimate
# • Sex (0 - female, 1 – male) and Chest Pain type (ChestPain).
sex_Cpain_table = table(my_heart$Sex, my_heart$ChestPain)
sex_Cpain <- fisher.test(sex_Cpain_table)
sex_Cpain$p.value
sex_Cpain$estimate
#TASK 3
# a) Create a plot with probability density function for the standard normal distribution for x
# from -4 to 4.
x <- seq(-4,4,0.01)
f <- dnorm(x) # probability density function
plot(x,f,pch=19)
#TASK 3
# a) Create a plot with probability density function for the standard normal distribution for x
# from -4 to 4.
x <- seq(-4,4,0.06)
f <- dnorm(x) # probability density function
plot(x,f,pch=19)
#TASK 3
# a) Create a plot with probability density function for the standard normal distribution for x
# from -4 to 4.
x <- seq(-4,4,0.01)
f <- dnorm(x) # probability density function
plot(x,f,pch=19)
#TASK 3
# a) Create a plot with probability density function for the standard normal distribution for x
# from -4 to 4.
x <- seq(-4,4,0.01)
f <- dnorm(x) # probability density function
plot(x,f,pch=19)
A = matrix(data=seq(1,100), nrow = 10, ncol = 10, byrow = TRUE)
rm(list = ls())
A = matrix(data=seq(1,100), nrow = 10, ncol = 10, byrow = TRUE)
A
rowA = A[3,]              # get row copy
rowA
colA = A[,2]              # get column copy
colA
subA = A[seq(10,1,-3),seq(1,10,2)]
seq(1,10,2)
[seq(10,1,-3)
[seq(10,1,-3)
seq(10,1,-3)
subA
# concatenation
A = matrix(data=c(1,2,3,4), nrow=2, ncol=2)                 # 2D 2x2 float array, elements initialized by columns
A
B = matrix(data=c(1L,2L,3L,4L), nrow=2, ncol=2, byrow=TRUE) # 2D 2x2 integer array, elements initialized by rows (always stored by columns)
B
vAB = rbind(A, B) # stack vertically
vAB
hAB = cbind(A, B) # stack horizontally
hAB
# reshape matrix
dim(hAB) = c(1,8)
dim(hAB)
hAB
D = diag(A) # dimensionality reduction: extract diagonal
D
X = diag(D) # dimensionality extension: build matrix from diagonal
X
diag(A) = 2 * D # set matrix diagonal
diag(A)
rm(list=ls())
A = list(1, 2, 3)         # list of three numerics
B = list(1, 'abc', TRUE, list(2,5))  # list of numeric, chr, logical, other list
subA = A[1]               # copy sublist of lengh 1
subB = B[1:2]             # copy sublist of length 2
a = A[[2]]                # get an element
A[[1]] = 100              # set an element
A[["xyz"]] = 4            # add an element with a string key
A
rm(list=ls())
A = list(1, 2, 3)         # list of three numerics
A
B = list(1, 'abc', TRUE, list(2,5))  # list of numeric, chr, logical, other list
B
subA = A[1]               # copy sublist of lengh 1
subA
subB = B[1:2]             # copy sublist of length 2
subB
a = A[[2]]                # get an element
a
A[[1]] = 100              # set an element
A
A[["xyz"]] = 4            # add an element with a string key
A[["xyz"]]
A
d <- data.frame(id = c(1, 2, 3, 4),
name = c("John", "Anne", "Tom", "Kate"),
status = c(TRUE, TRUE, FALSE, FALSE))
(list=ls())
rm(list=ls())
d <- data.frame(id = c(1, 2, 3, 4),
name = c("John", "Anne", "Tom", "Kate"),
status = c(TRUE, TRUE, FALSE, FALSE))
d
str(d)
colnames(d) <- c("ID", "Name","Status")
str(d)
d
d$Name
d[,2]
d[2]
rm(list=ls())
data("iris") # Iris data set
str(iris) # structure of the data frame
head(iris) # first 6 rows
head(iris, 10) # first 10 rows
tail(iris, 10) # last 10 rows
summary(iris)
dim(iris) # dimensions
iris$Sepal.Length
unique(iris$Species) # unique values
table(iris$Species) # how many observations in each group?
duplicated(iris) # is row duplicated?
duplicated(iris) # is row duplicated?
any(duplicated(iris)) # is any row duplicated?
which(duplicated(iris)) # which row is duplicated?
duplicated(iris$Petal.Length) # duplicated petal lengths
which(duplicated(iris$Petal.Length))
which.max(iris$Petal.Width) # which observation has a maximal value of petal width?
which(iris$Petal.Width == max(iris$Petal.Width)) # actually, there are more observations with this value!!!
# by
data("iris")
attach(iris)
head(iris)
apply(y, 2, mean)
by(iris, list(Species=iris$Species), function(x){
y <- subset(x, select= -Species)
apply(y, 2, mean)
} )
# Sorting
sort(iris$Sepal.Length) #vector
# Sorting a data frame the hard way
sIris <- sort(iris$Sepal.Length, index.return=TRUE)
head(iris[sIris$ix,]) #sorted data frame
# Elegant data frame sorting
library(dplyr)
sIris <- arrange(iris, Sepal.Length)
head(sIris)
L <- list(a = 1, b = 1:3, c = 10:100) # creating a list with three elements, each of them is a numeric vector
L
str(L)
for(i in 1:length(L)) {
cat('Number of elements in vector ', i, ': ', length(L[[i]]), '\n')
}
lapply(L, length)
sapply(L, length)
# Now let's print the summary for the first 4 columns of the iris data frame:
apply(iris[1:4], 2, summary)
rm(list = ls()) # cleaning the workspace
x <- seq(0, 100, 5)
x
y <- log(x)
x <- seq(0, 100, 5)
x
y <- log(x)
y
plot (x, y,                                   # plot arguments and values
type="o",                               # lines and points
col="red",
xaxt="n", yaxt="n",                     # suppress the axes
xlab = expression(paste("Value ", italic(x))),     # use math notation
ylab = expression(paste(alpha, '=', log(x))),
ylim = log(c(1,50))
)
x <- c("abc", "bcd", "cde", "def")
x
# Find indices of elements containing "bc"
grep("bc", x)
x <- c("abc", "bcd", "cde", "def", "gbcd")
x
# Find indices of elements containing "bc"
grep("bc", x)
# Output: [1] 1 2
# Return matching values
grep("bc", x, value = TRUE)
# Find indices of elements containing "bc"
grep("bc", x)
# Output: [1] 1 2
# Return matching values
grep("bc", x, value = TRUE)
# Output: [1] "abc" "bcd"
# Ignore case
grep("BC", x, ignore.case = TRUE)
x <- c("abc", "bcd", "cde", "def")
x
# Replace first match
sub("bc", "gh", x)
# Output: [1] "agh" "ghd" "cde" "def"
# Replace all matches
gsub("k", "z", x)
# Output: [1] "agh" "ghd" "cde" "def"
# Replace all matches
gsub("b", "k", x)
x <- c("abc", "bcd", "cde", "bbbbdef")
# Output: [1] "agh" "ghd" "cde" "def"
# Replace all matches
gsub("b", "k", x)
# Output: [1] "agh" "ghd" "cde" "def"
# Replace all matches
gsub("bc", "k", x)
x <- c("abc", "bcd", "cde", "bbbbdefc")
# Output: [1] "agh" "ghd" "cde" "def"
# Replace all matches
gsub("bc", "ko", x)
# Replace first match
sub("bc", "kk", x)
x <- c("ablc", "bcd", "cde", "bbbbdefc")
# Replace first match
sub("bc", "kk", x)
# Output: [1] "agh" "ghd" "cde" "def"
# Replace all matches
gsub("bc", "ko", x)
x <- "This lecture is poor"
x
# Replace "p" with "g" and "r" with "d"
chartr("pr", "gd", x)
a <- "Mississippi contains a palindrome ississi."
a
# First occurrence of "iss"
regexpr("iss", a)
# Output: [1] 2
# Match groups
regexec(".(ss)", a)
a <- "Missikkssippi contains a palindrome ississi."
# First occurrence of "iss"
regexpr("iss", a)
# Output: [1] 2
# Match groups
regexec(".(ss)", a)
a <- "Misksikkssippi contains a palindrome ississi."
# First occurrence of "iss"
regexpr("iss", a)
a <- "Misksikkssippi contains a palindrome isksissi."
# First occurrence of "iss"
regexpr("iss", a)
# Output: [1] 2
# Match groups
regexec(".(ss)", a)
# Output: [1] 2
# Match groups
a <- "Misksikkssippi contains a palindrome isksissi."
regexec(".(ss)", a)
regexec("..(ss)", a)
regexec(".*(ss)", a)
regexec(".+(ss)", a)
[1]
# Output: [1] 2
# Match groups
a <- "Misksikkssippi contains a palindrome isksissi."
regexec(".(pp)", a)
# First occurrence of "iss"
regexpr("iss", a)
a <- "Misksikkssippi contains a palindrome isksisssi."
# First occurrence of "iss"
regexpr("iss", a)
# First occurrence of "iss"
regexpr("isss", a)
a <- "My"
b <- "string"
# Add a space between strings
paste(a, b)
# Concatenate without spaces
paste0(a, b)
# Add a custom separator
paste(a, b, sep = ".")
paste0(a, b, sep=",")
# Task 2
# Load the tweets.RData file into RStudio. It is a data frame containing the tweets published
# by the RDataMining profile in a certain time range
load("tweets.RData")
rm(list = ls()) # cleaning the workspace
# apply
M <- matrix(1:16, nrow = 4, ncol = 4)
M
apply(M, 2, min)
apply(M, 1, min)
# lapply
L <- list(a = 1, b = 1:3, c = 10:100)
L
lapply(L, length)
list_data <- list(a = 1:5, b = 6:10)
list_data
lapply(list_data, mean)
unlist(lapply(list_data, mean) )
# sapply
L <- list(a = 1, b = 1:3, c = 10:100)
L
sapply(L, length)
# mapply
mapply(sum, 1:5, 1:5, 1:5)
# by
data("iris")
attach(iris)
head(iris)
Species=iris$Species
list(Species=iris$Species)
subset(x, select= -Species)
function(x){
y <- subset(x, select= -Species)
apply(y, 2, mean)
}
by(iris, list(Species=iris$Species), function(x){
y <- subset(x, select= -Species)
apply(y, 2, mean)
} )
x
# aggregate
iris.x <- subset(iris, select= -Species)
iris.x
iris.s <- subset(iris, select= Species)
iris.s
iris$Sepal.Length
# Sorting
sort(iris$Sepal.Length) #vector
# Sorting a data frame the hard way
sIris <- sort(iris$Sepal.Length, index.return=TRUE)
sIris
head(iris[sIris$ix,]) #sorted data frame
